{"version":3,"sources":["logo.svg","components/Row.js","components/Result.js","components/Notification.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Row","this","props","item","word","count","Component","Result","data","Table","striped","bordered","hover","variant","map","Notification","msg","Form","submitHandler","e","preventDefault","console","log","state","axios","get","n","then","res","setState","success","message","onChangeHandler","target","name","value","showComponent","showNotification","showResult","onSubmit","type","onChange","Button","onClick","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,kLCa5BC,EAXf,uKAEI,OACE,4BACE,4BAAKC,KAAKC,MAAMC,KAAKC,MACrB,4BAAKH,KAAKC,MAAMC,KAAKE,YAL7B,GAAyBC,aCwBVC,EAvBf,uKAEI,IAAMC,EAAOP,KAAKC,MAAMM,KACxB,OACE,6BAEE,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,QACpC,+BACE,4BACE,oCACA,0CAGDL,EAAKM,KAAI,SAACX,GAAD,OACR,kBAAC,EAAD,CAAKA,KAAMA,cAdzB,GAA4BG,a,QCSbS,EAVf,uKAEI,OACE,6BACE,4BAAKd,KAAKC,MAAMc,UAJxB,GAAkCV,aC6EnBW,EAzEf,kDACE,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IAWRgB,cAAgB,SAACC,GACfA,EAAEC,iBACFC,QAAQC,IAAI,EAAKC,OACjBC,IACGC,IAAI,gDAAkD,EAAKF,MAAMG,GACjEC,MAAK,SAACC,GACL,EAAKC,SAAS,CAAErB,KAAMoB,EAAIpB,KAAJ,OACtBa,QAAQC,IAAIM,EAAIpB,KAAJ,MACZ,EAAKqB,SAAS,CAAEC,QAASF,EAAIpB,KAAJ,UACzB,EAAKqB,SAAS,CAAEE,QAASH,EAAIpB,KAAJ,cArBZ,EAyBnBwB,gBAAkB,SAACb,GACjB,EAAKU,SAAL,eAAiBV,EAAEc,OAAOC,KAAOf,EAAEc,OAAOE,SA1BzB,EA6BnBC,cAAgB,SAACF,GACf,EAAKL,SAAS,CAAEQ,kBAAkB,IAClC,EAAKR,SAAS,CAAES,YAAY,KA7B5B,EAAKf,MAAQ,CACXG,EAAG,GACHY,YAAY,EACZ9B,KAAM,GACNsB,SAAS,EACTO,kBAAkB,EAClBN,QAAS,IARM,EADrB,qDAmCY,IAAD,EAQH9B,KAAKsB,MANPG,EAFK,EAELA,EACAY,EAHK,EAGLA,WAGAD,GANK,EAIL7B,KAJK,EAKLsB,QALK,EAMLO,kBANK,EAOLN,QAEF,OACE,6BACE,0BAAMQ,SAAUtC,KAAKiB,eACnB,6BACA,6BACE,2CACA,6BACA,2BACEsB,KAAK,OACLN,KAAK,IACLC,MAAOT,EACPe,SAAUxC,KAAK+B,mBAGnB,6BACA,6BACE,kBAACU,EAAA,EAAD,CAAQ7B,QAAQ,OAAO2B,KAAK,SAASG,QAAS1C,KAAKmC,eAAnD,WAIF,8BAEDC,GAAoB,kBAAC,EAAD,CAAcrB,IAAKf,KAAKsB,MAAMQ,UAClDO,GAAc,kBAAC,EAAD,CAAQ9B,KAAMP,KAAKsB,MAAMf,YAnEhD,GAA0BF,aCQXsC,MATf,WACE,OACE,yBAAKC,UAAU,OAEb,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAM/B,c","file":"static/js/main.20cc7a75.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\n\r\nexport class Row extends Component {\r\n  render() {\r\n    return (\r\n      <tr>\r\n        <td>{this.props.item.word}</td>\r\n        <td>{this.props.item.count}</td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Row;\r\n","import React, { Component } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport Row from \"./Row\";\r\nexport class Result extends Component {\r\n  render() {\r\n    const data = this.props.data;\r\n    return (\r\n      <div>\r\n        {/* <div>The top {data.length} frequently occuring words are:</div> */}\r\n        <Table striped bordered hover variant=\"dark\">\r\n          <tbody>\r\n            <tr>\r\n              <th>Word</th>\r\n              <th>Frequency</th>\r\n            </tr>\r\n\r\n            {data.map((item) => (\r\n              <Row item={item} />\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class Notification extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>{this.props.msg}</h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Result from \"./Result\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport Notification from \"./Notification\";\r\n\r\nexport class Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      n: \"\",\r\n      showResult: false,\r\n      data: [],\r\n      success: true,\r\n      showNotification: false,\r\n      message: \"\",\r\n    };\r\n  }\r\n\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n    axios\r\n      .get(\"https://tttbackend.herokuapp.com/file/data?n=\" + this.state.n)\r\n      .then((res) => {\r\n        this.setState({ data: res.data[\"data\"] });\r\n        console.log(res.data[\"data\"]);\r\n        this.setState({ success: res.data[\"success\"] });\r\n        this.setState({ message: res.data[\"message\"] });\r\n      });\r\n  };\r\n\r\n  onChangeHandler = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  showComponent = (name) => {\r\n    this.setState({ showNotification: true });\r\n    this.setState({ showResult: true });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      n,\r\n      showResult,\r\n      data,\r\n      success,\r\n      showNotification,\r\n      message,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.submitHandler}>\r\n          <br />\r\n          <div>\r\n            <label>Enter n:</label>\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              name=\"n\"\r\n              value={n}\r\n              onChange={this.onChangeHandler}\r\n            />\r\n          </div>\r\n          <br />\r\n          <div>\r\n            <Button variant=\"info\" type=\"submit\" onClick={this.showComponent}>\r\n              Submit\r\n            </Button>\r\n          </div>\r\n          <br />\r\n        </form>\r\n        {showNotification && <Notification msg={this.state.message} />}\r\n        {showResult && <Result data={this.state.data} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Form from \"./components/Form\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <h1>Welcome</h1> */}\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}